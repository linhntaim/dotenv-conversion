"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _envUtils=_interopRequireDefault(require("./env-utils"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var INTEGER_REGEX=/^[+-]?\d+$/;function defaultConfig(){return{parsed:{},ignoreProcessEnv:false,specs:{},prevents:[],methods:{auto:function auto(value){if(value.startsWith("auto:")){value=value.substring(5)}value=_envUtils["default"].restoreValue(value);if(typeof value==="string"){var availableMethod=Object.keys(this).find(function(method){return value.startsWith("".concat(method,":"))});if(availableMethod){value=this[availableMethod](value.substring(availableMethod.length+1))}}return value},bool:function bool(value){value=value.trim();if(!value){return false}return!["false","False","FALSE","no","No","NO","null","Null","NULL","undefined","UNDEFINED","NaN","not","Not","NOT","none","None","NONE"].includes(value)&&function(isNumber,isBigInt){return!isNumber&&!isBigInt||isNumber&&Number(value)!==0||isBigInt&&BigInt(value.slice(0,-1))!==0n}(_envUtils["default"].NUMBER_REGEX.test(value),_envUtils["default"].BIGINT_REGEX.test(value))},num:function num(value){return this.number(value)},number:function number(value){value=value.trim();if(!value){return 0}value=parseFloat(value);return Number.isNaN(value)?0:value},big:function big(value){return this.bigint(value)},bigint:function bigint(value){value=value.trim();if(!value){return 0n}if(INTEGER_REGEX.test(value)){return BigInt(value)}if(_envUtils["default"].BIGINT_REGEX.test(value)){return BigInt(value.slice(0,-1))}value=parseFloat(value);switch(true){case Number.isNaN(value):return 0n;case Number.isInteger(value):return BigInt(value);default:return BigInt(parseInt(value))}},raw:function raw(value){return value},symbol:function symbol(value){value=value.trim();if(!value){return Symbol()}var symbol=_envUtils["default"].SYMBOL_REGEX.test(value)?value.slice(7,-1):value;try{return Symbol(symbol)}catch(e){return value}},arr:function arr(value){return this.array(value)},array:function array(value){value=value.trim();if(!value){return[]}var arr=_envUtils["default"].ARRAY_REGEX.test(value)?value:"[".concat(value,"]");try{return JSON.parse(arr)}catch(e){return[value]}},obj:function obj(value){return this.json(value)},json:function json(value){value=value.trim();if(!value){return{}}var json=_envUtils["default"].JSON_REGEX.test(value)?value:"{".concat(value,"}");try{return JSON.parse(json)}catch(e){return value}}}}}function mergeConfig(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var mergingConfig=defaultConfig();var update=function update(name){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(name in config){switch(type){case"merge":Object.assign(mergingConfig[name],config[name]);break;default:mergingConfig[name]=config[name];break}}};update("parsed");update("ignoreProcessEnv");update("specs");update("prevents");update("methods","merge");return mergingConfig}function interpolate(name,value,config){if(config.prevents.includes(name)){return value}var method=name in config.specs?config.specs[name]:"auto";switch(_typeof(method)){case"string":if(method in config.methods){return config.methods[method](value)}return value;case"function":return method(value);default:return value}}function convert(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};config=mergeConfig(config);var environment=config.ignoreProcessEnv?{}:process.env;for(var configKey in config.parsed){var value=Object.prototype.hasOwnProperty.call(environment,configKey)?environment[configKey]:config.parsed[configKey];config.parsed[configKey]=interpolate(configKey,value,config)}for(var processKey in config.parsed){environment[processKey]=_envUtils["default"].flattenValue(config.parsed[processKey])}return config}var _default=exports["default"]={convert:convert};
//# sourceMappingURL=index.js.map