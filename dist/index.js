"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _envUtils=_interopRequireDefault(require("./env-utils"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&iter[Symbol.iterator]!=null||iter["@@iterator"]!=null)return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var INTEGER_REGEX=/^[+-]?\d+$/;var TRUE_VALUES=_envUtils["default"].TRUE_VALUES;var FALSE_VALUES=[].concat(_toConsumableArray(_envUtils["default"].FALSE_VALUES),_toConsumableArray(_envUtils["default"].NULL_VALUES),_toConsumableArray(_envUtils["default"].UNDEFINED_VALUES),_toConsumableArray(_envUtils["default"].NAN_VALUES),["not","Not","NOT","none","None","NONE"]);function defaultConfig(){return{parsed:{},fromDotEnv:true,ignoreProcessEnv:false,prevents:[],specs:{},methods:{auto:function auto(value,name,config){value=_envUtils["default"].restoreValue(value,config.fromDotEnv);if(typeof value==="string"){var findPossibleMethod=function findPossibleMethod(methods){return methods.find(function(method){return value.startsWith("".concat(method,":"))})};var possibleMethod;// find in methods
possibleMethod=findPossibleMethod(Object.keys(this));if(possibleMethod){return this[possibleMethod](value.substring(possibleMethod.length+1),name,config)}// find in aliases
possibleMethod=findPossibleMethod(Object.keys(config.methodAliases));if(possibleMethod){return this[config.methodAliases[possibleMethod]](value.substring(possibleMethod.length+1),name,config)}return this.string(value)}return value},"boolean":function boolean(value){value=value.trim();if(!value){return false}return!FALSE_VALUES.includes(value)&&function(isNumber,isBigInt){return!isNumber&&!isBigInt||isNumber&&Number(value)!==0||isBigInt&&BigInt(value.slice(0,-1))!==0n}(_envUtils["default"].NUMBER_REGEX.test(value),_envUtils["default"].BIGINT_REGEX.test(value))},number:function number(value){value=value.trim();if(!value){return 0}if(TRUE_VALUES.includes(value)){return 1}if(FALSE_VALUES.includes(value)){return 0}value=parseFloat(value);return Number.isNaN(value)?0:value},bigint:function bigint(value){value=value.trim();if(!value){return 0n}if(TRUE_VALUES.includes(value)){return 1n}if(FALSE_VALUES.includes(value)){return 0n}if(INTEGER_REGEX.test(value)){return BigInt(value)}if(_envUtils["default"].BIGINT_REGEX.test(value)){return BigInt(value.slice(0,-1))}value=parseFloat(value);switch(true){case Number.isNaN(value):return 0n;case Number.isInteger(value):return BigInt(value);default:return BigInt(parseInt(value))}},string:function string(value){return value},symbol:function symbol(value){var trimmed=value.trim();if(!trimmed){return Symbol()}return Symbol(_envUtils["default"].SYMBOL_REGEX.test(trimmed)?trimmed.slice(7,-1):trimmed)},array:function array(value){var trimmed=value.trim();if(!trimmed){return[]}try{return JSON.parse(_envUtils["default"].ARRAY_REGEX.test(trimmed)?trimmed:"[".concat(trimmed,"]"))}catch(e){return this.string(value)}},json:function json(value){var trimmed=value.trim();if(!trimmed){return{}}try{return JSON.parse(_envUtils["default"].JSON_REGEX.test(trimmed)?trimmed:"{".concat(trimmed,"}"))}catch(e){return this.string(value)}}},methodAliases:{bool:"boolean",num:"number",big:"bigint",str:"string",arr:"array",obj:"json"}}}function mergeConfig(config){var mergingConfig=defaultConfig();if("parsed"in config){mergingConfig.parsed=config.parsed}if("fromDotEnv"in config){mergingConfig.fromDotEnv=config.fromDotEnv}if("ignoreProcessEnv"in config){mergingConfig.ignoreProcessEnv=config.ignoreProcessEnv}if("prevents"in config){mergingConfig.prevents=config.prevents}if("specs"in config){mergingConfig.specs=config.specs}if("methods"in config){Object.assign(mergingConfig.methods,config.methods)}if("methodAliases"in config){for(var alias in config.methodAliases){// not override existing alias
if(alias in mergingConfig.methodAliases){continue}// not use name of existing methods or aliases
if(alias in mergingConfig.methods){continue}// only add alias to existing methods
var method=config.methodAliases[alias];if(method in mergingConfig.methods){mergingConfig.methodAliases[alias]=method}}}return mergingConfig}function convertValue(value,name,config){if(config.prevents.includes(name)){return value}if(name in config.specs){var method=config.specs[name];switch(_typeof(method)){case"string":if(method in config.methods){return config.methods[method](value,name,config)}if(method in config.methodAliases){return config.methods[config.methodAliases[method]](value,name,config)}return config.methods.string(value,name,config);case"function":return method(value,name,config);default:return config.methods.string(value,name,config)}}return config.methods.auto(value,name,config)}function convert(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};config=mergeConfig(config);var environment=config.ignoreProcessEnv?{}:process.env;for(var configKey in config.parsed){var value=Object.prototype.hasOwnProperty.call(environment,configKey)?environment[configKey]:config.parsed[configKey];config.parsed[configKey]=convertValue(value,configKey,config)}for(var processKey in config.parsed){environment[processKey]=_envUtils["default"].flattenValue(config.parsed[processKey])}return config}var _default=exports["default"]={convert:convert};
//# sourceMappingURL=index.js.map