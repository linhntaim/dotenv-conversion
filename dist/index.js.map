{"version":3,"file":"index.js","names":["NUMBER_REGEX","BIGINT_REGEX","SYMBOL_REGEX","ARRAY_REGEX","JSON_REGEX","NULL_VALUES","UNDEFINED_VALUES","TRUE_VALUES","FALSE_VALUES","NAN_VALUES","INFINITY_VALUES","unescapeValue","value","replaceAll","restoreValue","fromDotEnv","includes","undefined","concat","test","Number","BigInt","slice","Symbol","JSON","parse","e","flattenValue","typeOf","_typeof","Boolean","String","toString","stringify","INTEGER_REGEX","FORCING_FALSE_VALUES","defaultConfig","parsed","ignoreProcessEnv","prevents","specs","methods","auto","name","config","findPossibleMethod","find","method","startsWith","possibleMethod","Object","keys","substring","length","methodAliases","string","boolean","trim","isNumber","isBigInt","number","parseFloat","isNaN","bigint","isInteger","parseInt","symbol","trimmed","array","json","bool","num","big","str","arr","obj","mergeConfig","mergingConfig","assign","alias","convertValue","convert","arguments","environment","process","env","configKey","prototype","hasOwnProperty","call","processKey","_default","exports"],"sources":["../src/index.js"],"sourcesContent":["/**\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\r\n */\r\n\r\n/* region env-utils */\r\n\r\nconst NUMBER_REGEX = /^[+-]?((\\d+(\\.(\\d*)?)?)|(\\.\\d+))(e[+-]?\\d+)?$/i\r\nconst BIGINT_REGEX = /^[+-]?\\d+n$/\r\nconst SYMBOL_REGEX = /^Symbol\\(.*\\)$/\r\nconst ARRAY_REGEX = /^\\[.*\\]$/\r\nconst JSON_REGEX = /^\\{.*\\}$/\r\nconst NULL_VALUES = ['null', 'Null', 'NULL']\r\nconst UNDEFINED_VALUES = ['undefined', 'UNDEFINED']\r\nconst TRUE_VALUES = ['true', 'True', 'TRUE', 'yes', 'Yes', 'YES']\r\nconst FALSE_VALUES = ['false', 'False', 'FALSE', 'no', 'No', 'NO']\r\nconst NAN_VALUES = ['NaN']\r\nconst INFINITY_VALUES = ['Infinity', '-Infinity', '+Infinity']\r\n\r\nfunction unescapeValue(value) {\r\n    return value.replaceAll('\\\\\"', '\"').replaceAll('\\\\\\\\', '\\\\')\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} value\r\n * @param {boolean} fromDotEnv\r\n * @returns {null|undefined|boolean|number|bigint|string|symbol|array|object}\r\n */\r\nfunction restoreValue(value, fromDotEnv) {\r\n    switch (true) {\r\n        case NULL_VALUES.includes(value):\r\n            return null\r\n\r\n        case UNDEFINED_VALUES.includes(value):\r\n            return undefined\r\n\r\n        case TRUE_VALUES.includes(value):\r\n            return true\r\n        case FALSE_VALUES.includes(value):\r\n            return false\r\n\r\n        case [...NAN_VALUES, ...INFINITY_VALUES].includes(value):\r\n        case NUMBER_REGEX.test(value):\r\n            return Number(value)\r\n\r\n        case BIGINT_REGEX.test(value):\r\n            return BigInt(value.slice(0, -1))\r\n\r\n        default:\r\n            if (fromDotEnv) {\r\n                value = unescapeValue(value)\r\n            }\r\n\r\n            switch (true) {\r\n                case SYMBOL_REGEX.test(value):\r\n                    return Symbol(value.slice(7, -1))\r\n\r\n                case ARRAY_REGEX.test(value):\r\n                case JSON_REGEX.test(value):\r\n                    try {\r\n                        return JSON.parse(value)\r\n                    }\r\n                    catch (e) {\r\n                        return value\r\n                    }\r\n\r\n                default:\r\n                    return value\r\n            }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {null|undefined|boolean|number|bigint|string|symbol|array|object} value\r\n * @returns {string}\r\n */\r\nfunction flattenValue(value) {\r\n    const typeOf = typeof value\r\n\r\n    switch (true) {\r\n        case value === null:\r\n        case typeOf === 'function':\r\n            return 'null'\r\n\r\n        case typeOf === 'undefined':\r\n            return 'undefined'\r\n\r\n        case typeOf === 'string':\r\n            return value\r\n\r\n        case typeOf === 'number':\r\n        case value instanceof Number:\r\n        case typeOf === 'boolean':\r\n        case value instanceof Boolean:\r\n        case typeOf === 'symbol':\r\n        case value instanceof String:\r\n            return value.toString()\r\n\r\n        case typeOf === 'bigint':\r\n        case value instanceof BigInt:\r\n            return `${value.toString()}n`\r\n\r\n        default:\r\n            return JSON.stringify(value)\r\n    }\r\n}\r\n\r\n/* endregion */\r\n\r\nconst INTEGER_REGEX = /^[+-]?\\d+$/\r\nconst FORCING_FALSE_VALUES = [\r\n    ...FALSE_VALUES,\r\n    ...NULL_VALUES,\r\n    ...UNDEFINED_VALUES,\r\n    ...NAN_VALUES,\r\n    'not', 'Not', 'NOT',\r\n    'none', 'None', 'NONE',\r\n]\r\n\r\nfunction defaultConfig() {\r\n    return {\r\n        parsed: {},\r\n        fromDotEnv: true,\r\n        ignoreProcessEnv: false,\r\n        prevents: [],\r\n        specs: {},\r\n        methods: {\r\n            auto(value, name, config) {\r\n                value = restoreValue(value, config.fromDotEnv)\r\n                if (typeof value === 'string') {\r\n                    const findPossibleMethod = methods => methods.find(method => value.startsWith(`${method}:`))\r\n                    let possibleMethod\r\n                    // find in methods\r\n                    possibleMethod = findPossibleMethod(Object.keys(this))\r\n                    if (possibleMethod) {\r\n                        return this[possibleMethod](\r\n                            value.substring(possibleMethod.length + 1),\r\n                            name,\r\n                            config,\r\n                        )\r\n                    }\r\n                    // find in aliases\r\n                    possibleMethod = findPossibleMethod(Object.keys(config.methodAliases))\r\n                    if (possibleMethod) {\r\n                        return this[config.methodAliases[possibleMethod]](\r\n                            value.substring(possibleMethod.length + 1),\r\n                            name,\r\n                            config,\r\n                        )\r\n                    }\r\n                    return this.string(value)\r\n                }\r\n                return value\r\n            },\r\n            boolean(value) {\r\n                value = value.trim()\r\n                if (!value) {\r\n                    return false\r\n                }\r\n                return !FORCING_FALSE_VALUES.includes(value)\r\n                    && ((isNumber, isBigInt) => {\r\n                        return (!isNumber && !isBigInt)\r\n                            || (isNumber && Number(value) !== 0)\r\n                            || (isBigInt && BigInt(value.slice(0, -1)) !== 0n)\r\n                    })(NUMBER_REGEX.test(value), BIGINT_REGEX.test(value))\r\n            },\r\n            number(value) {\r\n                value = value.trim()\r\n                if (!value) {\r\n                    return 0\r\n                }\r\n                if (TRUE_VALUES.includes(value)) {\r\n                    return 1\r\n                }\r\n                if (FORCING_FALSE_VALUES.includes(value)) {\r\n                    return 0\r\n                }\r\n                value = parseFloat(value)\r\n                return Number.isNaN(value) ? 0 : value\r\n            },\r\n            bigint(value) {\r\n                value = value.trim()\r\n                if (!value) {\r\n                    return 0n\r\n                }\r\n                if (TRUE_VALUES.includes(value)) {\r\n                    return 1n\r\n                }\r\n                if (FORCING_FALSE_VALUES.includes(value)) {\r\n                    return 0n\r\n                }\r\n                if (INTEGER_REGEX.test(value)) {\r\n                    return BigInt(value)\r\n                }\r\n                if (BIGINT_REGEX.test(value)) {\r\n                    return BigInt(value.slice(0, -1))\r\n                }\r\n                value = parseFloat(value)\r\n                switch (true) {\r\n                    case Number.isNaN(value):\r\n                        return 0n\r\n                    case Number.isInteger(value):\r\n                        return BigInt(value)\r\n                    default:\r\n                        return BigInt(parseInt(value))\r\n                }\r\n            },\r\n            string(value) {\r\n                return value\r\n            },\r\n            symbol(value) {\r\n                const trimmed = value.trim()\r\n                if (!trimmed) {\r\n                    return Symbol()\r\n                }\r\n                return Symbol(\r\n                    SYMBOL_REGEX.test(trimmed)\r\n                        ? trimmed.slice(7, -1)\r\n                        : trimmed,\r\n                )\r\n            },\r\n            array(value) {\r\n                const trimmed = value.trim()\r\n                if (!trimmed) {\r\n                    return []\r\n                }\r\n                try {\r\n                    return JSON.parse(\r\n                        ARRAY_REGEX.test(trimmed)\r\n                            ? trimmed\r\n                            : `[${trimmed}]`,\r\n                    )\r\n                }\r\n                catch (e) {\r\n                    return this.string(value)\r\n                }\r\n            },\r\n            json(value) {\r\n                const trimmed = value.trim()\r\n                if (!trimmed) {\r\n                    return {}\r\n                }\r\n                try {\r\n                    return JSON.parse(\r\n                        JSON_REGEX.test(trimmed)\r\n                            ? trimmed\r\n                            : `{${trimmed}}`,\r\n                    )\r\n                }\r\n                catch (e) {\r\n                    return this.string(value)\r\n                }\r\n            },\r\n        },\r\n        methodAliases: {\r\n            bool: 'boolean',\r\n            num: 'number',\r\n            big: 'bigint',\r\n            str: 'string',\r\n            arr: 'array',\r\n            obj: 'json',\r\n        },\r\n    }\r\n}\r\n\r\nfunction mergeConfig(config) {\r\n    const mergingConfig = defaultConfig()\r\n    if ('parsed' in config) {\r\n        mergingConfig.parsed = config.parsed\r\n    }\r\n    if ('fromDotEnv' in config) {\r\n        mergingConfig.fromDotEnv = config.fromDotEnv\r\n    }\r\n    if ('ignoreProcessEnv' in config) {\r\n        mergingConfig.ignoreProcessEnv = config.ignoreProcessEnv\r\n    }\r\n    if ('prevents' in config) {\r\n        mergingConfig.prevents = config.prevents\r\n    }\r\n    if ('specs' in config) {\r\n        mergingConfig.specs = config.specs\r\n    }\r\n    if ('methods' in config) {\r\n        Object.assign(mergingConfig.methods, config.methods)\r\n    }\r\n    if ('methodAliases' in config) {\r\n        for (const alias in config.methodAliases) {\r\n            // not override existing alias\r\n            if (alias in mergingConfig.methodAliases) {\r\n                continue\r\n            }\r\n            // not use name of existing methods or aliases\r\n            if (alias in mergingConfig.methods) {\r\n                continue\r\n            }\r\n            // only add alias to existing methods\r\n            const method = config.methodAliases[alias]\r\n            if (method in mergingConfig.methods) {\r\n                mergingConfig.methodAliases[alias] = method\r\n            }\r\n        }\r\n    }\r\n    return mergingConfig\r\n}\r\n\r\nfunction convertValue(value, name, config) {\r\n    if (config.prevents.includes(name)) {\r\n        return value\r\n    }\r\n\r\n    if (name in config.specs) {\r\n        const method = config.specs[name]\r\n        switch (typeof method) {\r\n            case 'string':\r\n                if (method in config.methods) {\r\n                    return config.methods[method](value, name, config)\r\n                }\r\n                if (method in config.methodAliases) {\r\n                    return config.methods[config.methodAliases[method]](value, name, config)\r\n                }\r\n                return config.methods.string(value, name, config)\r\n            case 'function':\r\n                return method(value, name, config)\r\n            default:\r\n                return config.methods.string(value, name, config)\r\n        }\r\n    }\r\n\r\n    return config.methods.auto(value, name, config)\r\n}\r\n\r\nfunction convert(config = {}) {\r\n    config = mergeConfig(config)\r\n\r\n    const environment = config.ignoreProcessEnv ? {} : process.env\r\n\r\n    for (const configKey in config.parsed) {\r\n        const value = Object.prototype.hasOwnProperty.call(environment, configKey)\r\n            ? environment[configKey]\r\n            : config.parsed[configKey]\r\n\r\n        config.parsed[configKey] = convertValue(value, configKey, config)\r\n    }\r\n\r\n    for (const processKey in config.parsed) {\r\n        environment[processKey] = flattenValue(config.parsed[processKey])\r\n    }\r\n\r\n    return config\r\n}\r\n\r\nexport default {convert}\r\n"],"mappings":"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"}