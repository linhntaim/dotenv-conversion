{"version":3,"file":"index.js","names":["_envUtils","_interopRequireDefault","require","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","INTEGER_REGEX","TRUE_VALUES","envUtils","FALSE_VALUES","concat","NULL_VALUES","UNDEFINED_VALUES","NAN_VALUES","defaultConfig","parsed","fromDotEnv","ignoreProcessEnv","prevents","specs","methods","auto","value","config","restoreValue","findPossibleMethod","find","method","startsWith","possibleMethod","keys","substring","methodAliases","string","boolean","trim","includes","isNumber","isBigInt","Number","BigInt","NUMBER_REGEX","BIGINT_REGEX","number","parseFloat","isNaN","bigint","isInteger","parseInt","symbol","trimmed","SYMBOL_REGEX","array","JSON","parse","ARRAY_REGEX","e","json","JSON_REGEX","bool","num","big","str","mergeConfig","mergingConfig","assign","alias","convertValue","convert","arguments","undefined","environment","process","env","configKey","hasOwnProperty","processKey","flattenValue","_default","exports"],"sources":["../src/index.js"],"sourcesContent":["import envUtils from './env-utils'\r\n\r\nconst INTEGER_REGEX = /^[+-]?\\d+$/\r\nconst TRUE_VALUES = envUtils.TRUE_VALUES\r\nconst FALSE_VALUES = [\r\n    ...envUtils.FALSE_VALUES,\r\n    ...envUtils.NULL_VALUES,\r\n    ...envUtils.UNDEFINED_VALUES,\r\n    ...envUtils.NAN_VALUES,\r\n    'not', 'Not', 'NOT',\r\n    'none', 'None', 'NONE',\r\n]\r\n\r\nfunction defaultConfig() {\r\n    return {\r\n        parsed: {},\r\n        fromDotEnv: true,\r\n        ignoreProcessEnv: false,\r\n        prevents: [],\r\n        specs: {},\r\n        methods: {\r\n            auto(value, name, config) {\r\n                value = envUtils.restoreValue(value, config.fromDotEnv)\r\n                if (typeof value === 'string') {\r\n                    const findPossibleMethod = methods => methods.find(method => value.startsWith(`${method}:`))\r\n                    let possibleMethod\r\n                    // find in methods\r\n                    possibleMethod = findPossibleMethod(Object.keys(this))\r\n                    if (possibleMethod) {\r\n                        return this[possibleMethod](\r\n                            value.substring(possibleMethod.length + 1),\r\n                            name,\r\n                            config,\r\n                        )\r\n                    }\r\n                    // find in aliases\r\n                    possibleMethod = findPossibleMethod(Object.keys(config.methodAliases))\r\n                    if (possibleMethod) {\r\n                        return this[config.methodAliases[possibleMethod]](\r\n                            value.substring(possibleMethod.length + 1),\r\n                            name,\r\n                            config,\r\n                        )\r\n                    }\r\n                    return this.string(value)\r\n                }\r\n                return value\r\n            },\r\n            boolean(value) {\r\n                value = value.trim()\r\n                if (!value) {\r\n                    return false\r\n                }\r\n                return !FALSE_VALUES.includes(value)\r\n                    && ((isNumber, isBigInt) => {\r\n                        return (!isNumber && !isBigInt)\r\n                            || (isNumber && Number(value) !== 0)\r\n                            || (isBigInt && BigInt(value.slice(0, -1)) !== 0n)\r\n                    })(envUtils.NUMBER_REGEX.test(value), envUtils.BIGINT_REGEX.test(value))\r\n            },\r\n            number(value) {\r\n                value = value.trim()\r\n                if (!value) {\r\n                    return 0\r\n                }\r\n                if (TRUE_VALUES.includes(value)) {\r\n                    return 1\r\n                }\r\n                if (FALSE_VALUES.includes(value)) {\r\n                    return 0\r\n                }\r\n                value = parseFloat(value)\r\n                return Number.isNaN(value) ? 0 : value\r\n            },\r\n            bigint(value) {\r\n                value = value.trim()\r\n                if (!value) {\r\n                    return 0n\r\n                }\r\n                if (TRUE_VALUES.includes(value)) {\r\n                    return 1n\r\n                }\r\n                if (FALSE_VALUES.includes(value)) {\r\n                    return 0n\r\n                }\r\n                if (INTEGER_REGEX.test(value)) {\r\n                    return BigInt(value)\r\n                }\r\n                if (envUtils.BIGINT_REGEX.test(value)) {\r\n                    return BigInt(value.slice(0, -1))\r\n                }\r\n                value = parseFloat(value)\r\n                switch (true) {\r\n                    case Number.isNaN(value):\r\n                        return 0n\r\n                    case Number.isInteger(value):\r\n                        return BigInt(value)\r\n                    default:\r\n                        return BigInt(parseInt(value))\r\n                }\r\n            },\r\n            string(value) {\r\n                return value\r\n            },\r\n            symbol(value) {\r\n                const trimmed = value.trim()\r\n                if (!trimmed) {\r\n                    return Symbol()\r\n                }\r\n                return Symbol(\r\n                    envUtils.SYMBOL_REGEX.test(trimmed)\r\n                        ? trimmed.slice(7, -1)\r\n                        : trimmed,\r\n                )\r\n            },\r\n            array(value) {\r\n                const trimmed = value.trim()\r\n                if (!trimmed) {\r\n                    return []\r\n                }\r\n                try {\r\n                    return JSON.parse(\r\n                        envUtils.ARRAY_REGEX.test(trimmed)\r\n                            ? trimmed\r\n                            : `[${trimmed}]`,\r\n                    )\r\n                }\r\n                catch (e) {\r\n                    return this.string(value)\r\n                }\r\n            },\r\n            json(value) {\r\n                const trimmed = value.trim()\r\n                if (!trimmed) {\r\n                    return {}\r\n                }\r\n                try {\r\n                    return JSON.parse(\r\n                        envUtils.JSON_REGEX.test(trimmed)\r\n                            ? trimmed\r\n                            : `{${trimmed}}`,\r\n                    )\r\n                }\r\n                catch (e) {\r\n                    return this.string(value)\r\n                }\r\n            },\r\n        },\r\n        methodAliases: {\r\n            bool: 'boolean',\r\n            num: 'number',\r\n            big: 'bigint',\r\n            str: 'string',\r\n            arr: 'array',\r\n            obj: 'json',\r\n        },\r\n    }\r\n}\r\n\r\nfunction mergeConfig(config) {\r\n    const mergingConfig = defaultConfig()\r\n    if ('parsed' in config) {\r\n        mergingConfig.parsed = config.parsed\r\n    }\r\n    if ('fromDotEnv' in config) {\r\n        mergingConfig.fromDotEnv = config.fromDotEnv\r\n    }\r\n    if ('ignoreProcessEnv' in config) {\r\n        mergingConfig.ignoreProcessEnv = config.ignoreProcessEnv\r\n    }\r\n    if ('prevents' in config) {\r\n        mergingConfig.prevents = config.prevents\r\n    }\r\n    if ('specs' in config) {\r\n        mergingConfig.specs = config.specs\r\n    }\r\n    if ('methods' in config) {\r\n        Object.assign(mergingConfig.methods, config.methods)\r\n    }\r\n    if ('methodAliases' in config) {\r\n        for (const alias in config.methodAliases) {\r\n            // not override existing alias\r\n            if (alias in mergingConfig.methodAliases) {\r\n                continue\r\n            }\r\n            // not use name of existing methods or aliases\r\n            if (alias in mergingConfig.methods) {\r\n                continue\r\n            }\r\n            // only add alias to existing methods\r\n            const method = config.methodAliases[alias]\r\n            if (method in mergingConfig.methods) {\r\n                mergingConfig.methodAliases[alias] = method\r\n            }\r\n        }\r\n    }\r\n    return mergingConfig\r\n}\r\n\r\nfunction convertValue(value, name, config) {\r\n    if (config.prevents.includes(name)) {\r\n        return value\r\n    }\r\n\r\n    if (name in config.specs) {\r\n        const method = config.specs[name]\r\n        switch (typeof method) {\r\n            case 'string':\r\n                if (method in config.methods) {\r\n                    return config.methods[method](value, name, config)\r\n                }\r\n                if (method in config.methodAliases) {\r\n                    return config.methods[config.methodAliases[method]](value, name, config)\r\n                }\r\n                return config.methods.string(value, name, config)\r\n            case 'function':\r\n                return method(value, name, config)\r\n            default:\r\n                return config.methods.string(value, name, config)\r\n        }\r\n    }\r\n\r\n    return config.methods.auto(value, name, config)\r\n}\r\n\r\nfunction convert(config = {}) {\r\n    config = mergeConfig(config)\r\n\r\n    const environment = config.ignoreProcessEnv ? {} : process.env\r\n\r\n    for (const configKey in config.parsed) {\r\n        const value = Object.prototype.hasOwnProperty.call(environment, configKey)\r\n            ? environment[configKey]\r\n            : config.parsed[configKey]\r\n\r\n        config.parsed[configKey] = convertValue(value, configKey, config)\r\n    }\r\n\r\n    for (const processKey in config.parsed) {\r\n        environment[processKey] = envUtils.flattenValue(config.parsed[processKey])\r\n    }\r\n\r\n    return config\r\n}\r\n\r\nexport default {convert}\r\n"],"mappings":"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"}