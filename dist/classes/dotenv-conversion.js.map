{"version":3,"sources":["../../src/classes/dotenv-conversion.js"],"names":["NUMBER_REGEX","DotEnvConversion","defaultOptions","methods","auto","value","vCased","toLowerCase","trim","null","bool","test","number","startsWith","raw","substr","array","json","includes","parseFloat","isNaN","values","c","split","map","v","forEach","vs","i","push","length","JSON","parse","e","specs","prevents","options","env","override","Object","assign","dotenvConfigOutput","setOptions","parsed","hasOwnProperty","name","convert","ignoreProcessEnv","environment","process","stringify","method","def"],"mappings":"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","sourcesContent":["const NUMBER_REGEX = /^(\\+|-)?\\d+(\\.\\d+)?(e(\\+|-)?\\d+)?$/i\r\n\r\nexport default class DotEnvConversion {\r\n    constructor() {\r\n        this.defaultOptions = {\r\n            methods: {\r\n                auto(value) {\r\n                    if (!value) return value\r\n\r\n                    const vCased = value.toLowerCase().trim()\r\n\r\n                    if (vCased === 'null') {\r\n                        return this.null()\r\n                    }\r\n                    if (vCased === 'true' || vCased === 'false' || vCased === 'yes' || vCased === 'no') {\r\n                        return this.bool(value)\r\n                    }\r\n                    if (NUMBER_REGEX.test(vCased)) {\r\n                        return this.number(value)\r\n                    }\r\n                    if (vCased.startsWith('raw:')) {\r\n                        return this.raw(value.substr(4))\r\n                    }\r\n                    if (vCased.startsWith('bool:')) {\r\n                        return this.bool(value.substr(5))\r\n                    }\r\n                    if (vCased.startsWith('number:')) {\r\n                        return this.number(value.substr(7))\r\n                    }\r\n                    if (vCased.startsWith('array:')) {\r\n                        return this.array(value.substr(6))\r\n                    }\r\n                    if (vCased.startsWith('json:')) {\r\n                        return this.json(value.substr(5))\r\n                    }\r\n                    return this.json(value)\r\n                },\r\n                raw(value) {\r\n                    return value\r\n                },\r\n                null() {\r\n                    return ''\r\n                },\r\n                bool(value) {\r\n                    if (!value) return false\r\n                    value = value.toLowerCase().trim()\r\n                    return !['', 'false', 'nan', 'no', 'not', 'none', 'null', 'undefined'].includes(value)\r\n                        && (!NUMBER_REGEX.test(value) || parseFloat(value) !== 0)\r\n                },\r\n                number(value) {\r\n                    if (!value) return 0\r\n                    value = parseFloat(value)\r\n                    return isNaN(value) ? 0 : value\r\n                },\r\n                array(value) {\r\n                    if (!value) return []\r\n                    return (() => {\r\n                        const values = []\r\n                        let c = 0\r\n                        value.split('\\\\,').map(v => v.split(',')).forEach(vs => {\r\n                            vs.forEach((v, i) => {\r\n                                i ? values.push(v) : (c && !i ? values[values.length - 1] += ',' + v : values.push(v))\r\n                            })\r\n                            c = values.length\r\n                        })\r\n                        return values\r\n                    })()\r\n                },\r\n                json(value) {\r\n                    if (!value) return {}\r\n                    try {\r\n                        return JSON.parse(value)\r\n                    } catch (e) {\r\n                        return value\r\n                    }\r\n                },\r\n            },\r\n            specs: {},\r\n            prevents: [],\r\n        }\r\n        this.options = {}\r\n        this.env = {}\r\n    }\r\n\r\n    setOptions(options = {}) {\r\n        const override = options.override ? options.override : null\r\n        delete options.override\r\n\r\n        this.options = Object.assign({}, this.defaultOptions, options)\r\n        if (override) {\r\n            Object.assign(this.options.methods, override)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    make(dotenvConfigOutput = {}, options = {}) {\r\n        this.setOptions(options)\r\n\r\n        this.env = {}\r\n\r\n        const parsed = dotenvConfigOutput.hasOwnProperty('parsed') ? dotenvConfigOutput.parsed : {}\r\n        for (const name in parsed) {\r\n            parsed[name] = this.convert(name, parsed[name])\r\n        }\r\n\r\n        const ignoreProcessEnv = dotenvConfigOutput.hasOwnProperty('ignoreProcessEnv') ? dotenvConfigOutput.ignoreProcessEnv : false\r\n        const environment = process.env\r\n        if (ignoreProcessEnv) {\r\n            for (const name in environment) {\r\n                const value = parsed.hasOwnProperty(name) ? parsed[name] : this.convert(name, environment[name])\r\n                this.env[name] = value\r\n            }\r\n        } else {\r\n            for (const name in environment) {\r\n                const value = parsed.hasOwnProperty(name) ? parsed[name] : this.convert(name, environment[name])\r\n                this.env[name] = value\r\n                environment[name] = ['boolean', 'number', 'string'].includes(typeof value) ? value : JSON.stringify(value)\r\n            }\r\n        }\r\n\r\n        return dotenvConfigOutput\r\n    }\r\n\r\n    convert(name, value) {\r\n        if (this.options.prevents.includes(name)) {\r\n            return value\r\n        }\r\n\r\n        const method = this.options.specs.hasOwnProperty(name) ? this.options.specs[name] : 'auto'\r\n        switch (typeof method) {\r\n            case 'string':\r\n                if (this.options.methods.hasOwnProperty(method)) {\r\n                    return this.options.methods[method](value)\r\n                }\r\n                return value\r\n            case 'function':\r\n                return method(value)\r\n            default:\r\n                return value\r\n        }\r\n    }\r\n\r\n    getenv(name = null, def = null) {\r\n        return name ? (this.env.hasOwnProperty(name) ? this.env[name] : def) : this.env\r\n    }\r\n}"],"file":"dotenv-conversion.js"}